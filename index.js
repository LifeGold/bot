const TelegramBot = require('node-telegram-bot-api');
const mysql = require('mysql');
const crypto = require('crypto-js');
const request = require('request');
const fs = require('fs');
const ExcelJS = require('exceljs');
const TOKEN = '–¢–û–ö–ï–ù';
const bot = new TelegramBot(TOKEN, { polling: true });
const photoHashes = new Set(); // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–µ—à-—Å—É–º–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
const db = mysql.createConnection({
  host: 'localhost',
  user: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
  password: '–ü–∞—Ä–æ–ª—å',
  database: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'
});

db.connect((err) => {
  if (err) {
    console.error('Error connecting to database:', err);
    return;
  }
  console.log('Connected to MySQL database');
});

const checkInterval = 60; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
const notificationInterval = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

bot.onText(/\/notify/, (msg) => {
  const chatId = msg.chat.id;

  if (msg.chat.type === 'private') {
    // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ 0 –≤ —Ç–∞–±–ª–∏—Ü–µ graf
    const query = `SELECT userid FROM graf WHERE pn = 0 AND vt = 0 AND sr = 0 AND ct = 0 AND pt = 0 AND sb = 0 AND vs = 0`;

    db.query(query, (err, results) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
      } else {
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        results.forEach((row) => {
          if(row.off === 1){

          } else {
            const username = row.userid;
            const message = `‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –í–∞—à –≥—Ä–∞—Ñ–∏–∫ –ø—É—Å—Ç. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã. ü§ù \n –î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start`;
            bot.sendMessage(username, message);
          }
        });

        bot.sendMessage(chatId, `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ${results.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.`);
      }
    });
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
bot.onText(/send_notifications (.+)/, (msg, match) => {
  const param = match[1]; // –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ –∫–æ–º–∞–Ω–¥—ã
if (msg.chat.type === 'private') {
  // –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –∫–∞–∫–æ–µ –ø–æ–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'pn', 'vt', 'sr') –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
  let fieldToCheck;
  switch (param) {
    case 'pn':
      fieldToCheck = 'pn';
      break;
    case 'vt':
      fieldToCheck = 'vt';
      break;
    case 'sr':
      fieldToCheck = 'sr';
      break;
    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å–ª—É—á–∞–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  }

if (fieldToCheck) {
    // –°–æ–∑–¥–∞–π—Ç–µ SQL-–∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
    const query = `SELECT userid, username FROM graf WHERE ${fieldToCheck} = 1`;

    db.query(query, (err, results) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞:', err);
      } else {
        results.forEach((row) => {
          // –ü–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const chatId = row.userid;
          const chatnames = row.username;

          // –û—Ç–ø—Ä–∞–≤—å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          bot.sendMessage(chatId, `‚ÄºÔ∏è @${chatnames}, –Ω–∞–ø–æ–º–∏–Ω–∞—é –í–∞–º, —á—Ç–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —É –í–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Ä–∞–±–æ—á–∞—è —Å–º–µ–Ω–∞.`);
        });
      }
    });
} else {
    // –í —Å–ª—É—á–∞–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    bot.sendMessage(msg.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /send_notifications [–ø–∞—Ä–∞–º–µ—Ç—Ä]');
  }
}
});


bot.onText(/\/ganer/, (msg) => {
  const chatId = msg.chat.id;
  if (msg.chat.type === 'private') {
generateExcelFile(chatId);
  }
});
// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel-—Ñ–∞–π–ª–∞
function generateExcelFile(chatId) {
  const workbook = new ExcelJS.Workbook();
  const worksheet = workbook.addWorksheet('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ');

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã catalog (–≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–∏ —Å—Ç–æ–ª–±—Ü—ã)
  const catalogQuery = 'SELECT pn, vt, sr, ct, pt, sb, vs FROM catalog WHERE id = 1';
  db.query(catalogQuery, (catalogError, catalogResults) => {
    if (catalogError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ catalog:', catalogError);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.');
    } else {
      const catalogData = catalogResults[0];

      // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã Excel
      worksheet.columns = [
        { header: '–¢–µ–ª–µ–≥—Ä–∞–º', key: 'telegram', width: 15 },
        { header: '–ü–Ω', key: 'pn', width: 15 },
        { header: '–í—Ç', key: 'vt', width: 15 },
        { header: '–°—Ä', key: 'sr', width: 15 },
        { header: '–ß—Ç', key: 'ct', width: 15 },
        { header: '–ü—Ç', key: 'pt', width: 15 },
        { header: '–°–±', key: 'sb', width: 15 },
        { header: '–í—Å', key: 'vs', width: 15 },
      ];

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã graf
      const grafQuery = 'SELECT username, pn, vt, sr, ct, pt, sb, vs FROM graf';
      db.query(grafQuery, (grafError, grafResults) => {
        if (grafError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ graf:', grafError);
          bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.');
        } else {
          // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É Excel
         grafResults.forEach((row) => {
  worksheet.addRow({
    telegram: row.username,
    pn: row.pn === 1 ? '–†–∞–±' : '–í—ã—Ö',
    vt: row.vt === 1 ? '–†–∞–±' : '–í—ã—Ö',
    sr: row.sr === 1 ? '–†–∞–±' : '–í—ã—Ö',
    ct: row.ct === 1 ? '–†–∞–±' : '–í—ã—Ö',
    pt: row.pt === 1 ? '–†–∞–±' : '–í—ã—Ö',
    sb: row.sb === 1 ? '–†–∞–±' : '–í—ã—Ö',
    vs: row.vs === 1 ? '–†–∞–±' : '–í—ã—Ö',
  });
});

          // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          const filePath = 'schedule.xlsx';
          workbook.xlsx.writeFile(filePath)
            .then(() => {
              bot.sendDocument(chatId, filePath);
            })
            .catch((writeError) => {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ Excel:', writeError);
              bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ Excel.');
            });
        }
      });
    }
  });
}



const scanning = async () => {
  console.log('Performing automatic check...');

  // –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 getUsersToCheckFromDatabase((usernamesToCheck) => {
  if (!usernamesToCheck || usernamesToCheck.length === 0) {
    console.log('No usernames to check.');
    setTimeout(scanning, checkInterval * 1000);
    return;
  }
    const currentTime = Math.floor(Date.now()); // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
	const currentssTimeWithBreak = new Date();
    for (const username of usernamesToCheck) {
      const query = `SELECT last_message_time, job, status, breaks, task, break_start FROM users WHERE username = ?`;
      db.query(query, [username], (err, results) => {
        if (err) {
          console.error('Error fetching data from database:', err);
          return;
        }
  
        if (results.length > 0) {
          const userLastMessageTime = results[0].last_message_time;
          const userJob = results[0].job;
          const userBreak = results[0].breaks;
          const userTask = results[0].task;
          const userBreakStart = results[0].break_start;
          console.log(`${currentssTimeWithBreak} Checking user:`, username);
          console.log('currentTime:', currentTime);
          if (userJob === 1 && userBreak === 0 && userTask === 0 && userLastMessageTime) {
			if (currentTime - userLastMessageTime > notificationInterval) {
				console.log('Sending notification for user:', username);
				updateWarningCount(username);
				getWarningCount(username, (count) => {
				  if (count !== null) {
					const newcount = count + 1;             
					if (newcount === 3) {
					  bot.sendMessage(ID –≥—Ä—É–ø–ø—ã, `‚ÄºÔ∏è @${username}, –≤–∞—à–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –Ω–µ –±—ã–ª–æ —É–∂–µ –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç.\n‚ö†Ô∏è –£ –í–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –ü–æ—Å–ª–µ –Ω–µ–≥–æ –í–∞—Å –æ–∂–∏–¥–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã –∏ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è.\n‚õîÔ∏è –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${newcount} / 4`);
					} else if (newcount === 4) {
					  bot.sendMessage(ID –≥—Ä—É–ø–ø—ã, `‚õîÔ∏è @${username}, –í–∞–º –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –ú—ã –≤—ã–Ω—É–∂–¥–µ–Ω—ã —Å –í–∞–º–∏ –ø–æ–ø—Ä–æ—â–∞—Ç—å—Å—è. \n‚ÄºÔ∏è –°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞.`);
					  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã –∏ —Å—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
					  updateJobsInDatabase(username, 0);
					 //–ó–î–ï–°–¨ –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ö–û–î –ó–ê–í–ï–†–®–ï–ù–ò—è –°–ú–ï–ù–´ 
					} else {
					  bot.sendMessage(ID –≥—Ä—É–ø–ø—ã, `‚ÄºÔ∏è @${username}, –≤–∞—à–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –Ω–µ –±—ã–ª–æ —É–∂–µ –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞—à–∏ –æ—Ç—á–µ—Ç—ã.\n‚õîÔ∏è –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${newcount} / 4`);
					}
				  } else {
					//message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`;
				  }
				  updateLastMessageTimeInDatabase(username, currentTime);
				});
			  }  
          } else if(userJob === 1 && userBreak === 1 && userTask === 0){
         // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
         getBreakTimeFromDatabase(username, (breakTime) => {
          if (breakTime !== null) {
            const remainingBreakTime = Math.max(0, breakTime - Math.floor((currentTime - userBreakStart) / 60000)); // –û—Ç–Ω–∏–º–∞–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞    
            // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å 10 –º–∏–Ω—É—Ç –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (remainingBreakTime === 10) {
              const notification = `‚è∞ @${username}, —É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å 10 –º–∏–Ω—É—Ç –¥–æ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞.`;
              bot.sendMessage(ID –≥—Ä—É–ø–ø—ã, notification);
            }
            if (remainingBreakTime === 0) {
              // –ü—Ä–∏ –Ω—É–ª–µ–≤–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ—Ä—ã–≤–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
              updateBreaksEndDatabase(username, 0);
              updateLastMessageTimeInDatabase(username, currentTime);
              const returnMessage = `üëç @${username} —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n‚è±  –í–∞—à –ø–µ—Ä–µ—Ä—ã–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.`;
              bot.sendMessage(ID –≥—Ä—É–ø–ø—ã, returnMessage);
            } else {
              // –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
              updateBreakTimeFromDatabase(username, remainingBreakTime);
              updateBreakTimeInDatabase(username, currentTime);
            }
          } else {
            console.log(`Break time not found for user ${username}`);
          }
        });
          }
        } else {
          console.log(`User ${username} not found in the database.`);
        }
      });
    }
    setTimeout(scanning, checkInterval * 1000); // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
  });
};
console.log('Starting automatic check...');
scanning(); // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É


// –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ - –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å groupInfo –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø 
const groupInfo = {
    'CheckGroup': 'ID –≥—Ä—É–ø–ø—ã',     // –ì—Ä—É–ø–ø–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≥—Ä—É–ø–ø–∞ –º–µ–Ω—è–µ—Ç—å—Å—è)
    'CheckGroupOld': 'ID –≥—Ä—É–ø–ø—ã',  // –ì—Ä—É–ø–ø–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—á–µ—Ç–æ–≤. (–Ω–µ–∏–∑–º–µ–Ω–Ω–∞—è –æ–¥–Ω–∞ –¥–ª—è –≤—Å–µ—Ö)
	'TiketGroup': 'ID –≥—Ä—É–ø–ø—ã',   	// –ì—Ä—É–ø–ø–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤ (–Ω–µ–∏–∑–º–µ–Ω–Ω–∞—è –æ–¥–Ω–∞ –¥–ª—è –≤—Å–µ—Ö).
};

bot.on('message', (msg) => {
	if (msg.chat.type === 'group' || msg.chat.type === 'supergroup') {
		const username = msg.from.username;
		const chatId = msg.chat.id;  // –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã
		const currentTime = Date.now();
		console.log(`Received a message from: ${username} in group: ${chatId}`);  // –í—ã–≤–æ–¥–∏–º ID –≥—Ä—É–ø–ø—ã –≤ –∫–æ–Ω—Å–æ–ª—å
		// –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
		getUsersToCheckFromDatabase((usernamesToCheck) => {
			if (usernamesToCheck.includes(username)) {
				console.log(`Received a message from: ${username}`);
				if (msg.chat.id.toString() === groupInfo['TiketGroup']) {
					updateLastMessageTimeInDatabase(username, currentTime);
					if (msg.text && msg.text.startsWith('+')) {
						console.log(`User send +: ${username}`);
						updateMessageTiket(username);
					}
				}
				
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ "CheckGroup" - (–û–¢–ß–ï–¢–´ –°–ö–ê–£–¢–û–í)
				if (msg.chat.id.toString() === groupInfo['CheckGroup']) {
					getUsersToCheckFromDatabase((usernames) => {
						if (usernames.includes(msg.from.username)) {
							if (msg.photo) {
								// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é (—Å–∞–º—É—é –±–æ–ª—å—à—É—é) —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
								const photo = msg.photo[msg.photo.length - 1];
								const fileId = photo.file_id;
								// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
								bot.getFile(fileId).then((fileInfo) => {
									const fileUrl = `https://api.telegram.org/file/bot${TOKEN}/${fileInfo.file_path}`;
									// –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é request
									request(fileUrl, { encoding: null }, (error, response, body) => {
										if (!error && response.statusCode === 200) {
											// –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à-—Å—É–º–º—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (SHA-256)
											const sha256 = crypto.SHA256(crypto.lib.WordArray.create(body)).toString(crypto.enc.Hex);
											// –ü–æ–∏—Å–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
											const searchQuery = 'SELECT hex_date FROM energo_table WHERE hex = ?';
											db.query(searchQuery, [sha256], (err, results) => {
												if (err) {
													console.error('Error searching for photo:', err);
												} else {
													if (results.length > 0) {
														const duplicatesDate = results[0].hex_date; // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
														bot.sendMessage(-1001706550057, `üìõ @${msg.from.username}, –æ–¥–Ω–∞ –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ—Ç—á–µ—Ç–µ —è–≤–ª—è–µ—Ç—Å—è –¥—É–±–ª–∏–∫–∞—Ç–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∫–æ—Ç–æ—Ä—É—é –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ä–∞–Ω–µ–µ. \n‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –æ—Ç: ${duplicatesDate}`);
													} else {
														// –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥—É–±–ª–∏–∫–∞—Ç–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
														photoHashes.add(sha256);
														// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
														const timeZone = 'Europe/Moscow';
														const currentDate = new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });
														const insertQuery = 'INSERT INTO energo_table (hex, hex_date) VALUES (?, ?)';
														db.query(insertQuery, [sha256, currentDate], (err, results) => {
															if (err) {
																console.error('Error inserting record:', err);
															} else {
																console.log('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.');
															}
														});
													}
												}
											});
										} else {
											console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.');
										}
									});
								});
							}
						}
					});  
					updateLastMessageTimeInDatabase(username, currentTime);
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π —Å –ø–æ–¥–ø–∏—Å—å—é
					if (msg.photo && msg.photo.length > 0) {
						// –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
						const caption = msg.caption ? msg.caption.toLowerCase() : '';
						// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ "–ü–æ–ø—Ä–∞–≤–∏–ª" –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
						if (caption.includes('–ø–æ–ø—Ä–∞–≤–∏–ª')) {
							// –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ "–ü–æ–ø—Ä–∞–≤–ª–µ–Ω–æ"
							updateMessagePop(username);
							updateMessageCount(username);
						}
					} 
					if (msg.caption) {
						const words = msg.caption.trim().split(' ');
						console.log('Words from caption:', words);
						if (words.length >= 1) {
							const firstWord = words[0];
							console.log('First word:', firstWord);
							if (!isNaN(firstWord)) {
								const numberFromFirstWord = parseInt(firstWord, 10);
								console.log('Number from first word:', numberFromFirstWord);
								if (words.length >= 2 && words[1].toLowerCase() === '—Ç—Å') {
									console.log('Updating TS count in the database');
									// –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π "–¢–°"
									updateMessageTs(username, numberFromFirstWord);
									updateMessageCount(username);
								} else {
									console.log('Caption does not match the expected format');
								}
							} else {
								console.log('First word is not a number');
							}
						} else {
							console.log('Caption does not contain any words');
						}
					} else {
						// –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
						updateMessageCount(username);
						updateMessageUnknowns(username);
					}
				}
		  

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ "CheckGroupOld" - (–°–ö–ê–£–¢–´ –ú–°–ö) - groupInfo['CheckGroupOld'] - –ë–£–î–ï–¢ –†–ê–ó–ù–´–ú –î–õ–Ø –†–ê–ó–ù–´–• –°–£–ü–ï–†–í–ê–ô–ó–ï–†–û–í
				if (msg.chat.id.toString() === groupInfo['CheckGroupOld']) {
				
					getJobFromDatabase(username, (userJob) => {
						getTaskFromDatabase(username, (userTask) => {
							getBreaksFromDatabase(username, (userBreaks) => {
								// –í–∑—è—Ç–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
								if (msg.text && msg.text.startsWith('–ó–∞–¥–∞—á–∞')) {
									if (userJob === 1) {
										if (userBreaks === 0){
											console.log(`Received a "–ó–∞–¥–∞—á–∞" message from: ${username}`);
											bot.sendMessage(msg.chat.id, `‚úÖ @${username} –≤–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞. \n‚ö†Ô∏è –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç "–í—ã–ø–æ–ª–Ω–µ–Ω–∞.`);
											updateTaskInDatabase(username, 1);
											updateLastMessageTimeInDatabase(username, currentTime);
										} else {
											// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ job —Ä–∞–≤–Ω–æ 0
											bot.sendMessage(msg.chat.id, `‚ö†Ô∏è @${username}, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤.`);
										}
									} else if (userJob === 0) {
										// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ job —Ä–∞–≤–Ω–æ 0
										bot.sendMessage(msg.chat.id, `‚ö†Ô∏è @${username}, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–º–µ–Ω—É.`);
									}
								}
								let shift;  // –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é shift
								// –ü–µ—Ä–µ–º–µ—â–∞–µ–º –±–ª–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–º–µ–Ω–µ –≤ –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏
								getUserShiftFromDatabase(username, (userShift) => {
									shift = userShift;  // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π shift
									//–ü–ï–†–ï–ü–ò–°–ê–¢–¨ –ü–ï–†–ï–†–´–í –¢–ê–ö –ß–¢–û–ë–´ –û–ù –°–ú–û–¢–†–ï–õ –ï–°–õ–ò –ß–ï–õ–û–í–ï–ö –†–ê–ë–û–¢–ê–ï–¢ –î–û 19:00 - –ê –ü–ï–†–ï–†–´–í –ü–†–û–ë–£–ï–¢ –í–ó–Ø–¢–¨ –í 17:30 –ï–ì–û –û–¢–ü–£–°–ö–ê–õ–û –¢–û–õ–¨–ö–û –ù–ê 30 –ú–ò–ù–£–¢
									if (msg.text && msg.text.startsWith('–ü–µ—Ä–µ—Ä—ã–≤')) {
										if (userJob === 1) {
											if (userTask === 0) {
												console.log(`Received a "–ü–µ—Ä–µ—Ä—ã–≤" message from: ${username}`);
												// –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
												getBreakTimeFromDatabase(username, (breakTime) => {
													if (breakTime !== null) {
														const currentTimeWithBreak = new Date(currentTime);
														currentTimeWithBreak.setMinutes(currentTimeWithBreak.getMinutes() + breakTime);
														// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–∑—è—Ç—å –ø–µ—Ä–µ—Ä—ã–≤
														const endDateMinus60Min = new Date(shift.endDate);
														endDateMinus60Min.setMinutes(endDateMinus60Min.getMinutes() - 60);
														if (currentTimeWithBreak > endDateMinus60Min) {
															bot.sendMessage(msg.chat.id, `‚ö†Ô∏è @${username}, –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –ø–µ—Ä–µ—Ä—ã–≤, —Ç–∞–∫ –∫–∞–∫ –¥–æ –∫–æ–Ω—Ü–∞ —Å–º–µ–Ω—ã —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –º–µ–Ω–µ–µ —á–∞—Å–∞.`);
															return;
														}
														// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
														updateBreakTimeInDatabase(username, currentTime);
														const breakTimes = breakTime;
														const messageText = `ü§© @${username} –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞ ü•™üåÆüåØ \n‚è± –£ –í–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å: ${breakTimes} –º–∏–Ω.\n‚ö†Ô∏è –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –ø–µ—Ä–µ—Ä—ã–≤–∞ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç "–ó–∞–≤–µ—Ä—à–∏–ª/–ó–∞–≤–µ—Ä—à–∏–ª–∞".`;
														bot.sendMessage(msg.chat.id, messageText);
														updateBreaksInDatabase(username, 1);
														updateLastMessageTimeInDatabase(username, currentTime);
													} else {
														console.log(`Break time not found for user ${username}`);
													}
												});
											} else {
												// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ job —Ä–∞–≤–Ω–æ 0
												bot.sendMessage(msg.chat.id, `‚ö†Ô∏è @${username}, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É.`);
											}
										} else if (userJob === 0) {
											// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ job —Ä–∞–≤–Ω–æ 0
											bot.sendMessage(msg.chat.id, `‚ö†Ô∏è @${username}, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–º–µ–Ω—É.`);
										}
									}
								});
								
								if (msg.caption) {
									const captionLower = msg.caption.toLowerCase();
									// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –í–ó–Ø–õ
									if (captionLower.startsWith('–≤–∑—è–ª')) {
										if (userJob === 1) {
											bot.sendMessage(msg.chat.id, `‚ö†Ô∏è @${username}, —É –≤–∞—Å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ —Å–º–µ–Ω–∞.`);
										} else {
											console.log(`Received a "–í–∑—è–ª" message from: ${username}`);
											// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ
											bot.sendMessage(msg.chat.id, `‚úÖ @${username} —Å–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞ \n‚ö†Ô∏è –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é —Å–º–µ–Ω—ã, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º "–°–¥–∞–ª" –≤ —á–∞—Ç`);
											// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã –∏ —Å—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
											updateJobInDatabase(username, 1);
											updateLastMessageTimeInDatabase(username, currentTime);
										}
									} 
									// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –°–î–ê–õ
									if (captionLower.startsWith('—Å–¥–∞–ª')) {
										if (userJob === 0) {
											bot.sendMessage(msg.chat.id, `‚ö†Ô∏è @${username}, —É –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–º–µ–Ω—ã.`);
										} else {
											console.log(`Received a "–í–∑—è–ª" message from: ${username}`);
											// –ü–æ–ª—É—á–∞–µ–º job, task –∏ breaks –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
											getTaskFromDatabase(username, (userTask) => {
												getBreaksFromDatabase(username, (userBreaks) => {
													if (userTask === 1 || userBreaks === 1) {
														bot.sendMessage(msg.chat.id, `‚ùå @${username} –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É, —É –í–∞—Å –∏–º–µ—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏.`);
													} else {
														// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã
														bot.sendMessage(msg.chat.id, `‚ùå @${username} —Å–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
														// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã –∏ —Å—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
														updateJobsInDatabase(username, 0);
														// –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
														getMessageCount(username, (count) => {
															getWarningCount(username, (warning) => {
																getPopCount(username, (pop) => {
																	getTsCount(username, (ts) => {
																		//getUnknownsCount(username, (unknowns) => {
																			getTiketCount(username, (tiket) => {
																				if (count !== null && warning !== null && pop !== null && ts !== null && tiket !== null) {
																					bot.sendMessage(msg.chat.id, `üìù –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è @${username}:\n\n‚úÖ –í—Å–µ–≥–æ –æ—Ç—á—ë—Ç–æ–≤: ${count} —à—Ç. \n‚ôªÔ∏è –†–µ–ª–æ–∫–∞—Ü–∏—è: ${ts} üõ¥ \nüÖøÔ∏è –ü–æ–ø—Ä–∞–≤–ª–µ–Ω–æ: ${pop} —à—Ç. \nüëª –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ: –°–∫–æ—Ä–æ... \n‚è∞ –¢–∏–∫–µ—Ç—ã: ${tiket} —à—Ç. \n‚õîÔ∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${warning} —à—Ç.`);
																				} else {
																					bot.sendMessage(msg.chat.id, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`);
																				}
																			});
																		// });
																	});
																});
															});
														});
													}
												});
											});
										}
									}
								}
								// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–≤–µ—Ä—à–∏–ª"
								if (msg.text && msg.text.toLowerCase().match(/^–∑–∞–≤–µ—Ä—à–∏[–ª–ª–∞]/)) {
									if (userJob === 1) {
										if (userTask === 0) {
											if (userBreaks === 1) {
												console.log(`Received a "–ó–∞–≤–µ—Ä—à–∏–ª/–ó–∞–≤–µ—Ä—à–∏–ª–∞" message from: ${username}`);
													getLastBreakStartTimeFromDatabase(username, (breakStartTime) => {
														if (breakStartTime) {
															getBreakTimeFromDatabase(username, (breakTime) => {
																if (breakTime !== null) {
																	const timeElapsedInSeconds = Math.floor((currentTime - breakStartTime) / 1000);
																	const newBreakTimeInMinutes = Math.max(0, breakTime - Math.floor(timeElapsedInSeconds / 60)); // –û—Ç–Ω–∏–º–∞–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞
																	const remainingTimeMessage = newBreakTimeInMinutes === 1 ? '0 –º–∏–Ω.' : `${newBreakTimeInMinutes} –º–∏–Ω.`;  // –£—á—Ç–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ newBreakTimeInMinutes —Ä–∞–≤–Ω–æ 1
																	// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
																	updateBreakTimeFromDatabase(username, newBreakTimeInMinutes);
																	updateBreaksEndDatabase(username, 0); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ó–∞–≤–µ—Ä—à–∏–ª"
																	updateLastMessageTimeInDatabase(username, currentTime);
																	bot.sendMessage(msg.chat.id, `üëç @${username} —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n‚è±  –£ –í–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å: ${remainingTimeMessage}`);
																} else {
																	console.log(`Break time not found for user ${username}`);
																}
															});
														} else {
															console.log(`Break start time not found for user ${username}`);
														}
													});
											} else { 
												bot.sendMessage(msg.chat.id, `‚ö†Ô∏è @${username}, —É –í–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞.`);
											}
										} else { 
											bot.sendMessage(msg.chat.id, `‚ö†Ô∏è @${username}, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É.`);
										}
									} else if (userJob === 0) {
										// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ job —Ä–∞–≤–Ω–æ 0
										bot.sendMessage(msg.chat.id, `‚ö†Ô∏è @${username}, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–º–µ–Ω—É.`);
									}
								}
								
								// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
								if (msg.caption && msg.caption.toLowerCase().includes('–≤—ã–ø–æ–ª–Ω–µ–Ω–∞')) {
									// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
									if (msg.photo && msg.photo.length > 0) {
										// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
										if (userJob === 1) {
											if (userTask === 1) {
												console.log(`Received a "–í—ã–ø–æ–ª–Ω–µ–Ω–∞" message from: ${username}`);
												updateTaskEndDatabase(username, 0); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ó–∞–≤–µ—Ä—à–∏–ª"
												updateLastMessageTimeInDatabase(username, currentTime);
												bot.sendMessage(msg.chat.id, `üëç @${username} —Å–ø–∞—Å–∏–±–æ. –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
											} else {
												// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ task —Ä–∞–≤–Ω–æ 0
												bot.sendMessage(msg.chat.id, `‚ö†Ô∏è @${username}, —É –í–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.`);
											}
										} else if (userJob === 0) {
											// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ job —Ä–∞–≤–Ω–æ 0
											bot.sendMessage(msg.chat.id, `‚ö†Ô∏è @${username}, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–º–µ–Ω—É.`);
										}
									} else {
										// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
										bot.sendMessage(msg.chat.id, `‚ö†Ô∏è @${username}, –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é "–í—ã–ø–æ–ª–Ω–µ–Ω–∞".`);
									}
								}
								if (msg.text && msg.text.trim().startsWith('–í—ã–ø–æ–ª–Ω–µ–Ω–∞')) {
									// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
									// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å —Ñ–æ—Ç–æ
									const captionLower = msg.caption ? msg.caption.toLowerCase() : '';
									if (captionLower.includes('–≤—ã–ø–æ–ª–Ω–µ–Ω–∞')) {

									} else {
										// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
										bot.sendMessage(msg.chat.id, `‚ö†Ô∏è @${username}, –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –í–∞–º–∏ –∑–∞–¥–∞—á–µ–π —Å –ø–æ–¥–ø–∏—Å—å—é "–í—ã–ø–æ–ª–Ω–µ–Ω–∞".`);
									}
								}
							});
						});
					});
				}  
			}
		});
	}
});


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /off
bot.onText(/\/off (.+)/, (msg, match) => {
  const usernameToOff = match[1]; // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã

  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ job –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è updateJobInDatabase(username, jobValue)

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º jobValue = 0 –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  updateJobInDatabase(usernameToOff, 0);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
  const notificationMessage = `üöÄ @${msg.from.username} –∑–∞–≤–µ—Ä—à–∏–ª —Å–º–µ–Ω—É @${usernameToOff}.`;
  const notificationChatId = '-1001706550057'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  bot.sendMessage(notificationChatId, notificationMessage);
});
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è job –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
function updateJobInDatabase(username, newJobValue) {
  // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, db)
  // –∏ –∏–º–µ–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

  // –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è job –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const queryUpdateJob = `UPDATE users SET job = ? WHERE username = ?`;

  db.query(queryUpdateJob, [newJobValue, username], (err, result) => {
    if (err) {
      console.error('Error updating job in database:', err);
    } else {
      console.log(`Job updated to ${newJobValue} for user ${username}`);
    }
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã–ª —á–µ–ª–æ–≤–µ–∫ —Å–º–µ–Ω—É –∏–ª–∏ –Ω–µ—Ç
function getJobFromDatabase(username, callback) {
  const query = `SELECT job FROM users WHERE username = ?`;
  db.query(query, [username], (err, results) => {
    if (err) {
      console.error('Error fetching job from database:', err);
      callback(null);
    } else {
      if (results.length > 0) {
        const job = results[0].job;
        callback(job);
      } else {
        callback(null);
      }
    }
  });
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–º–µ–Ω–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function getUserShiftFromDatabase(username, callback) {
  const query = `SELECT startDate, endDate FROM users WHERE username = ?`;
  db.query(query, [username], (err, results) => {
    if (err) {
      console.error('Error fetching data from database:', err);
      callback(null);
    } else {
      if (results.length > 0) {
        const shift = {
          startDate: new Date(results[0].startDate),
          endDate: new Date(results[0].endDate)
        };
        callback(shift);
      } else {
        console.log(`User ${username} not found in the database.`);
        callback(null);
      }
    }
  });
}
function updateMessagePop(username) {
  const querySelect = `SELECT pop FROM users WHERE username = ?`;

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ "–ü–æ–ø—Ä–∞–≤–ª–µ–Ω–æ"
  db.query(querySelect, [username], (err, results) => {
    if (err) {
      console.error('Error fetching data from database:', err);
      return;
    }

    if (results.length > 0) {
      const currentCount = results[0].pop;
      const newCount = currentCount + 1;

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ "–ü–æ–ø—Ä–∞–≤–ª–µ–Ω–æ"
      const queryUpdate = `UPDATE users SET pop = ? WHERE username = ?`;
      db.query(queryUpdate, [newCount, username], (err) => {
        if (err) {
          console.error('Error updating pop in database:', err);
        } else {
          console.log(`Count updated to ${newCount} for user ${username}`);
        }
      });
    } else {
      console.log(`User ${username} not found in the database.`);
    }
  });
}


function updateMessageTiket(username) {
  const querySelect = `SELECT tiket FROM users WHERE username = ?`;

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ "–ü–æ–ø—Ä–∞–≤–ª–µ–Ω–æ"
  db.query(querySelect, [username], (err, results) => {
    if (err) {
      console.error('Error fetching data from database:', err);
      return;
    }

    if (results.length > 0) {
      const currentCount = results[0].tiket;
      const newCount = currentCount + 1;

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ "–ü–æ–ø—Ä–∞–≤–ª–µ–Ω–æ"
      const queryUpdate = `UPDATE users SET tiket = ? WHERE username = ?`;
      db.query(queryUpdate, [newCount, username], (err) => {
        if (err) {
          console.error('Error updating tiket in database:', err);
        } else {
          console.log(`Count updated to ${newCount} for user ${username}`);
        }
      });
    } else {
      console.log(`User ${username} not found in the database.`);
    }
  });
}

function updateMessageUnknowns(username) {
  const querySelect = `SELECT unknowns FROM users WHERE username = ?`;

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ "–ü–æ–ø—Ä–∞–≤–ª–µ–Ω–æ"
  db.query(querySelect, [username], (err, results) => {
    if (err) {
      console.error('Error fetching data from database:', err);
      return;
    }

    if (results.length > 0) {
      const currentCount = results[0].unknowns;
      const newCount = currentCount + 1;

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ "–ü–æ–ø—Ä–∞–≤–ª–µ–Ω–æ"
      const queryUpdate = `UPDATE users SET unknowns = ? WHERE username = ?`;
      db.query(queryUpdate, [newCount, username], (err) => {
        if (err) {
          console.error('Error updating unknowns in database:', err);
        } else {
          console.log(`Count updated to ${newCount} for user ${username}`);
        }
      });
    } else {
      console.log(`User ${username} not found in the database.`);
    }
  });
}


function updateMessageTs(username, number) {
  const querySelect = `SELECT ts FROM users WHERE username = ?`;

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ "–¢–°"
  db.query(querySelect, [username], (err, results) => {
    if (err) {
      console.error('Error fetching data from database:', err);
      return;
    }

    if (results.length > 0) {
      const currentCount = results[0].ts;
      const newCount = currentCount + number;

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ "–¢–°"
      const queryUpdate = `UPDATE users SET ts = ? WHERE username = ?`;
      db.query(queryUpdate, [newCount, username], (err) => {
        if (err) {
          console.error('Error updating ts in database:', err);
        } else {
          console.log(`Count updated to ${newCount} for user ${username}`);
        }
      });
    } else {
      console.log(`User ${username} not found in the database.`);
    }
  });
}


function getTaskFromDatabase(username, callback) {
  const query = `SELECT task FROM users WHERE username = ?`;
  db.query(query, [username], (err, results) => {
    if (err) {
      console.error('Error fetching task from database:', err);
      callback(null);
    } else {
      if (results.length > 0) {
        const userTask = results[0].task;
        callback(userTask);
      } else {
        callback(null);
      }
    }
  });
}

function getBreaksFromDatabase(username, callback) {
  const query = `SELECT breaks FROM users WHERE username = ?`;
  db.query(query, [username], (err, results) => {
    if (err) {
      console.error('Error fetching breaks from database:', err);
      callback(null);
    } else {
      if (results.length > 0) {
        const userBreaks = results[0].breaks;
        callback(userBreaks);
      } else {
        callback(null);
      }
    }
  });
}



bot.onText(/\/clear/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
  bot.getChatAdministrators(chatId).then(admins => {
    const isAdmin = admins.some(admin => admin.user.id === userId);
    if (isAdmin) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      clearUserDataInDatabase();
      bot.sendMessage(chatId, '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.');
    } else {
      bot.sendMessage(chatId, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
    }
  }).catch(error => {
    console.error('Error getting chat administrators:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.');
  });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ
function updateMessageCount(username) {
  const querySelect = `SELECT count FROM users WHERE username = ?`;

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
  db.query(querySelect, [username], (err, results) => {
    if (err) {
      console.error('Error fetching data from database:', err);
      return;
    }

    if (results.length > 0) {
      const currentCount = results[0].count;
      const newCount = currentCount + 1;

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
      const queryUpdate = `UPDATE users SET count = ? WHERE username = ?`;
      db.query(queryUpdate, [newCount, username], (err) => {
        if (err) {
          console.error('Error updating count in database:', err);
        } else {
          console.log(`Count updated to ${newCount} for user ${username}`);
        }
      });
    } else {
      console.log(`User ${username} not found in the database.`);
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ –±–∞–∑–µ
function updateWarningCount(username) {
  const querySelect = `SELECT warning FROM users WHERE username = ?`;

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
  db.query(querySelect, [username], (err, results) => {
    if (err) {
      console.error('Error fetching data from database:', err);
      return;
    }

    if (results.length > 0) {
      const currentCount = results[0].warning;
      const newCount = currentCount + 1;

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
      const queryUpdate = `UPDATE users SET warning = ? WHERE username = ?`;
      db.query(queryUpdate, [newCount, username], (err) => {
        if (err) {
          console.error('Error updating count in database:', err);
        } else {
          console.log(`Warning updated to ${newCount} for user ${username}`);
        }
      });
    } else {
      console.log(`User ${username} not found in the database.`);
    }
  });
}
bot.onText(/\/stat/, (msg) => {
  // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã /stat
  const command = msg.text.split(' ');
  if (command.length !== 2) {
    bot.sendMessage(msg.chat.id, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stat <username> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    return;
  }

  const requestedUsername = command[1].replace('@', '');  // –£–¥–∞–ª—è–µ–º @, –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç

  // –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getMessageCount(requestedUsername, (count) => {
    if (count !== null) {
      bot.sendMessage(msg.chat.id, `üìù –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è @${requestedUsername}:\n‚úÖ –í—Å–µ–≥–æ –æ—Ç—á—ë—Ç–æ–≤: ${count} —à—Ç.`);
    } else {
      bot.sendMessage(msg.chat.id, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${requestedUsername} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`);
    }
  });
});

bot.onText(/\/all/, (msg) => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã
  const command = msg.text.split(' ');
  if (command.length !== 1) {
    bot.sendMessage(msg.chat.id, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stat –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å job=1.');
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å job=1 –∏ –∏—Ö —Å—á–µ—Ç—á–∏–∫
  getUsersWithJob1Count((users) => {
    if (users.length > 0) {
      let statMessage = 'üìù –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n';
      users.forEach((user) => {
        statMessage += `‚úÖ @${user.username}: ${user.count} —à—Ç.\n`;
      });
      bot.sendMessage(msg.chat.id, statMessage);
    } else {
      bot.sendMessage(msg.chat.id, '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å job=1 –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
    }
  });
});


function getUsersWithJob1Count(callback) {
  const query = `SELECT username, count FROM users WHERE job = 1`;
  db.query(query, (err, results) => {
    if (err) {
      console.error('Error fetching data from database:', err);
      return callback([]);
    }

    const usersWithCount = results.map((row) => {
      return {
        username: row.username,
        count: row.count
      };
    });

    callback(usersWithCount);
  });
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ 1 - –ü–µ—Ä–µ—Ä—ã–≤ 0 - –û—Ç–∫–ª—é—á–µ–Ω
function updateBreaksInDatabase(username, newStatus) {
  const query = `UPDATE users SET breaks = ? WHERE username = ?`;
  db.query(query, [newStatus, username], (err) => {
    if (err) {
      console.error('Error updating breaks in database:', err);
    } else {
      console.log(`breaks updated to ${newStatus} for user ${username}`);
    }
  });
}

// –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ü–µ—Ä–µ—Ä—ã–≤–µ
function getLastBreakStartTimeFromDatabase(username, callback) {
  const query = `SELECT break_start FROM users WHERE username = ?`;
  db.query(query, [username], (err, results) => {
    if (err) {
      console.error('Error fetching break start time from database:', err);
      callback(null);
    } else {
      if (results.length > 0) {
        const breakStartTime = results[0].break_start;
        callback(breakStartTime);
      } else {
        callback(null);
      }
    }
  });
}
function getBreaksFromDatabase(username, callback) {
  const query = `SELECT breaks FROM users WHERE username = ?`;
  db.query(query, [username], (err, results) => {
    if (err) {
      console.error('Error fetching breaks from database:', err);
      callback(null);
    } else {
      if (results.length > 0) {
        const breaks = results[0].breaks;
        callback(breaks);
      } else {
        callback(null);
      }
    }
  });
}

function getTaskFromDatabase(username, callback) {
  const query = `SELECT task FROM users WHERE username = ?`;
  db.query(query, [username], (err, results) => {
    if (err) {
      console.error('Error fetching task from database:', err);
      callback(null);
    } else {
      if (results.length > 0) {
        const task = results[0].task;
        callback(task);
      } else {
        callback(null);
      }
    }
  });
}
// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–µ—Ä–µ—Ä—ã–≤–µ
function updateBreakTimeInDatabase(username, breakStartTime) {
  const query = `UPDATE users SET break_start = ? WHERE username = ?`;
  db.query(query, [breakStartTime, username], (err) => {
    if (err) {
      console.error('Error updating break time in database:', err);
    } else {
      console.log(`Break time updated for user ${username}`);
    }
  });
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∫–æ–ª—å–∫–æ —É —Å–∫–∞—É—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ–±–µ–¥.
function updateBreakTimeFromDatabase(username, breakStartTime) {
  const query = `UPDATE users SET break_time = ? WHERE username = ?`;
  db.query(query, [breakStartTime, username], (err) => {
    if (err) {
      console.error('Error updating break time in database:', err);
    } else {
      console.log(`Break time updated for user ${username}`);
    }
  });
}

// –ü–æ–ª—É—á–∞–µ–º —Å–∫–æ–ª—å–∫–æ —É —Å–∫–∞—É—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ–±–µ–¥.
function getBreakTimeFromDatabase(username, callback) {
  const query = `SELECT break_time FROM users WHERE username = ?`;
  db.query(query, [username], (err, results) => {
    if (err) {
      console.error('Error fetching data from database:', err);
      callback(null);
    } else {
      if (results.length > 0) {
        const breakTime = results[0].break_time;
        callback(breakTime);
      } else {
        callback(null);
      }
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function getMessageCount(username, callback) {
  const query = `SELECT count FROM users WHERE username = ?`;

  db.query(query, [username], (err, results) => {
    if (err) {
      console.error('Error fetching data from database:', err);
      callback(null);
    } else {
      if (results.length > 0) {
        const count = results[0].count;
        callback(count);
      } else {
        callback(null);
      }
    }
  });
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function getWarningCount(username, callback) {
  const query = `SELECT warning FROM users WHERE username = ?`;

  db.query(query, [username], (err, results) => {
    if (err) {
      console.error('Error fetching data from database:', err);
      callback(null);
    } else {
      if (results.length > 0) {
        const warning = results[0].warning;
        callback(warning);
      } else {
        callback(null);
      }
    }
  });
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function getTsCount(username, callback) {
  const query = `SELECT ts FROM users WHERE username = ?`;

  db.query(query, [username], (err, results) => {
    if (err) {
      console.error('Error fetching data from database:', err);
      callback(null);
    } else {
      if (results.length > 0) {
        const ts = results[0].ts;
        callback(ts);
      } else {
        callback(null);
      }
    }
  });
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function getUnknownsCount(username, callback) {
  const query = `SELECT unknowns FROM users WHERE username = ?`;

  db.query(query, [username], (err, results) => {
    if (err) {
      console.error('Error fetching data from database:', err);
      callback(null);
    } else {
      if (results.length > 0) {
        const unknowns = results[0].unknowns;
        callback(unknowns);
      } else {
        callback(null);
      }
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function getTiketCount(username, callback) {
  const query = `SELECT tiket FROM users WHERE username = ?`;

  db.query(query, [username], (err, results) => {
    if (err) {
      console.error('Error fetching data from database:', err);
      callback(null);
    } else {
      if (results.length > 0) {
        const tiket = results[0].tiket;
        callback(tiket);
      } else {
        callback(null);
      }
    }
  });
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function getPopCount(username, callback) {
  const query = `SELECT pop FROM users WHERE username = ?`;

  db.query(query, [username], (err, results) => {
    if (err) {
      console.error('Error fetching data from database:', err);
      callback(null);
    } else {
      if (results.length > 0) {
        const pop = results[0].pop;
        callback(pop);
      } else {
        callback(null);
      }
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ
function clearUserDataInDatabase() {
  const query = `UPDATE users SET task = 0, breaks = 0, job = 0, count=0, break_time=60, pop=0, ts=0, unknowns=0, warning=0, tiket=0`;
  db.query(query, (err) => {
    if (err) {
      console.error('Error updating data in database:', err);
    } else {
      console.log('User data cleared successfully.');
    }
  });
}

function getUsersToCheckFromDatabase(callback) {
  const query = 'SELECT username FROM users';
  db.query(query, (err, results) => {
    if (err) {
      console.error('Error fetching usernames from database:', err);
      callback([]);
    } else {
      const usernames = results.map(result => result.username);
      callback(usernames);
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –≤–∑—è—Ç–∏—è –ó–∞–¥–∞—á–∏
function updateTaskInDatabase(username, newStatus) {
  const query = `UPDATE users SET task = ? WHERE username = ?`;
  db.query(query, [newStatus, username], (err) => {
    if (err) {
      console.error('Error updating breaks in database:', err);
    } else {
      console.log(`breaks updated to ${newStatus} for user ${username}`);
    }
  });
}


function updateJobInDatabase(username, newJob) {
  const query = `UPDATE users SET job = ? WHERE username = ?`;
  db.query(query, [newJob, username], (err) => {
    if (err) {
      console.error('Error updating status in database:', err);
    } else {
      console.log(`Job updated to ${newJob} for user ${username}`);
    }
  });
}
function updateJobsInDatabase(username, newJobs) {
  const query = `UPDATE users SET job = ? WHERE username = ?`;
  db.query(query, [newJobs, username], (err) => {
    if (err) {
      console.error('Error updating status in database:', err);
    } else {
      console.log(`Job updated to ${newJobs} for user ${username}`);
    }
  });
}
function updateTaskEndDatabase(username, newStatusText) {
  const query = `UPDATE users SET task = ? WHERE username = ?`;
  db.query(query, [newStatusText, username], (err) => {
    if (err) {
      console.error('Error updating task in database:', err);
    } else {
      console.log(`Task updated to "${newStatusText}" for user ${username}`);
    }
  });
}

function updateBreaksEndDatabase(username, newStatusText) {
  const query = `UPDATE users SET breaks = ? WHERE username = ?`;
  db.query(query, [newStatusText, username], (err) => {
    if (err) {
      console.error('Error updating task in database:', err);
    } else {
      console.log(`Break updated to "${newStatusText}" for user ${username}`);
    }
  });
}


function getLastMessageTimeFromDatabase(username, callback) {
  const query = `SELECT last_message_time FROM users WHERE username = ?`;
  db.query(query, [username], (err, results) => {
    if (err) {
      console.error('Error fetching data from database:', err);
      return;
    }
    if (results.length > 0) {
      callback(results[0].last_message_time);
    } else {
      callback(null); // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    }
  });
}

function updateLastMessageTimeInDatabase(username, timestamp) {
  const query = `UPDATE users SET last_message_time = ? WHERE username = ?`;
  db.query(query, [timestamp, username], (err) => {
    if (err) {
      console.error('Error updating data in database:', err);
    }
  });
}

if (TOKEN) {
  console.log('Bot is running...');
} else {
  console.error("Bot token is missing!");
}
